// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  username        String            @unique
  password        String
  name            String?
  dateJoined      DateTime          @default(now())
  distanceMetric  String
  weightMetric    String
  totalWorkouts   Int
  Workouts        Workouts[]
  Exercises       Exercises[]
  PersonalRecords PersonalRecords[]
  sessions        Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Workouts {
  id                   Int                    @id @default(autoincrement())
  athleteId            String
  athlete              User                   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  dateCompleted        DateTime
  duration             Float
  name                 String
  notes                String
  WorkoutExerciseGroup WorkoutExerciseGroup[]
  Exercises            Exercises[]
}

model Exercises {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  type                 ExerciseType           @default(REGULAR)
  authorId             String
  author               User                   @relation(fields: [authorId], references: [id])
  description          String
  equipment            String
  muscleGroups         MuscleGroup[]
  videoLink            String
  exerciseType         ExerciseType
  PersonalRecords      PersonalRecords[]
  ExerciseMuscleGroup  ExerciseMuscleGroup[]
  WorkoutExerciseGroup WorkoutExerciseGroup[]
  Workouts             Workouts?              @relation(fields: [workoutsId], references: [id])
  workoutsId           Int?
}

enum ExerciseType {
  REGULAR
  PT
}

model PersonalRecords {
  id         Int       @id @default(autoincrement())
  athleteId  String
  athlete    User      @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  exerciseId Int
  exercise   Exercises @relation(fields: [exerciseId], references: [id])
  reps       Int
  distance   Float
  weight     Float
  sets       Int
}

model MuscleGroup {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  exercises           Exercises[]
  ExerciseMuscleGroup ExerciseMuscleGroup[]
}

model ExerciseMuscleGroup {
  exerciseId    Int
  muscleGroupId Int
  exercise      Exercises   @relation(fields: [exerciseId], references: [id])
  muscleGroup   MuscleGroup @relation(fields: [muscleGroupId], references: [id])

  @@id([exerciseId, muscleGroupId])
}

model WorkoutExerciseGroup {
  exerciseId  Int
  workoutId   Int
  reps        Int
  sets        Int
  weight      Int
  distance    Int
  pr          Boolean
  restTime    Int
  workout     Workouts   @relation(fields: [workoutId], references: [id])
  Exercises   Exercises? @relation(fields: [exercisesId], references: [id])
  exercisesId Int?

  @@id([exerciseId, workoutId])
}
